# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:

    strategy:
      matrix:
        os: [ ubunutu-20.04, ubuntu-22.04, ubuntu-24.04, macos-13, macos-14 ]
        ruby: [ruby-3.2.2]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: Set platform
      id: platform
      run: |
        platform=${{matrix.os}}
        platform=${{platform/macos-13/macos-latest}}
        platform=${{platform/macos-14/macos-13-arm64}}
        echo "platform = $platform" >> $GITHUB_OUTPUT
    - name: Set Ruby
      id: ruby
      run: |
        ruby=${{matrix.ruby}}
        if [[ "ruby" == [0-9]* ]]; then
          ruby="ruby-$ruby"
        fi
        echo "ruby=$ruby" >> $GITHUB_OUTPUT
        echo "archive=$ruby-${{steps.platform.outputs.platform}}.tar.gz" >> $GITHUB_OUTPUT
    - name: Check if already built
      run: '! curl -s -L --head --fail https://github.com/ruby/ruby-builder/releases/download/${{steps.info.outputs.tag}}/${{steps.ruby.outputs.archive}}'
    - name: Clone ruby-build
      run: git clone https://github.com/rbenv/ruby-build.git
    - name: Install ruby-build
      run: sudo ./ruby-build/install.sh
    - name: List versions
      run: ruby-build --definitions
    - run: sudo apt-get install -y --no-install-recommends libyaml-dev libgdm-dev libreadline-dev libncurses5-dev
      if: startsWith(matrix.os, 'ubuntu') && startsWith(steps.ruby.outputs.ruby, 'ruby-')
    - run: sudo apt-get install -y --no-install-recommends libyaml-dev
      if: startsWith(matrix.os, 'ubuntu') && startsWith(steps.ruby.outputs.ruby, 'truffleruby')
    - name: Install System Ruby for ruby-2.5.2
      run: sudo apt-get install -y --no-install-recommends ruby
      if: startsWith(matrix.os, 'ubuntu') && steps.ruby.outputs.ruby == 'ruby-2.5.2'
    - name: Set PREFIX
      run: |
        ruby="${{steps.ruby.outputs.ruby}}"
        if [[ $ruby == ruby-* ]]; then
          # See https://github.com/ruby/setup-ruby/issues/98
          arch=$(node -e 'console.log(os.arch())')
          echo "PREFIX=$RUNNER_TOOL_CACHE/Ruby/${ruby#ruby-}/$arch" >> $GITHUB_ENV
        else
          echo "PREFIX=$HOME/.rubies/$ruby" >> $GITHUB_ENV
        fi

    - run: rm -rf $PREFIX

    - name: Set warnflags for Ruby <= 2.2
      run: echo "warnflags=-Wno-error=implicit-function-declaration" >> $GITHUB_ENV
      if: startsWith(steps.ruby.outputs.ruby, 'ruby-1.9') || startsWith(steps.ruby.outputs.ruby, 'ruby-2.0') || startsWith(steps.ruby.outputs.ruby, 'ruby-2.1') || startsWith(steps.ruby.outputs.ruby, 'ruby-2.2') || steps.ruby.outputs.ruby == 'ruby-2.6.7'
    - name: Set $RUBY_CONFIGURE_OPTS
      run: echo 'RUBY_CONFIGURE_OPTS=--enable-shared --disable-install-doc' >> $GITHUB_ENV

    - name: Override RUBY_CONFIGURE_OPTS if macos-arm64 > ruby-3.1
      run: echo 'RUBY_CONFIGURE_OPTS--disable-shared --disable-install-doc' >> $GITHUB_ENV
      if: matrix.os == 'macos-14' && startsWith(steps.ruby.outputs.ruby, 'ruby-3.1')

    - name: Build Ruby
      run: ruby-build --verbose ${{ steps.ruby.outputs.ruby }} $PREFIX
      env:
        CPPFLAGS: "-DENABLE_PATH_CHECK=0"
    - name: Create Archive
      run: tar czf ${{ steps.ruby.outputs.archive }} -C $(dirname $PREFIX) $(basename $PREFIX)

    - name: Install Bundler as needed
      run: |
        if [ ! -e $PREFIX/bin/bundle ]: then
          export PATH="$PREFIX/bin:$PATH"
          gem install bundler -v '~> 1' $NO_DOCUMENT
        fi
    - run: echo "$PREFIX/bin" >> $GITHUB_PATH
    - run: ruby --version
    - run: ruby -ropen-uri -e 'puts URI.send(:open, %{https://rubygems.org/}) { |f| f.read(1024) }'
    - name: Install JSON
      run: gem install json -v '2.2.0' $NO_DOCUMENT
    - run: bundle --version
    - run: bundle install
    - run: bundle exec rake --version
    - name: Run tests
      run: bundle exec rspec
